================================================================================
INSTRUCTIONS POUR CRÉER DES LABS SUR KILLERCODA.COM
Python Basics - InSkillFlowLabs
================================================================================

ÉTAPE 1 : CRÉER UN COMPTE KILLERCODA
================================================================================
1. Aller sur https://killercoda.com
2. Cliquer sur "Sign in" en haut à droite
3. Se connecter avec GitHub (recommandé) ou créer un compte
4. Confirmer votre email


ÉTAPE 2 : CRÉER UN DÉPÔT GITHUB POUR VOS LABS
================================================================================
1. Aller sur GitHub (https://github.com)
2. Créer un nouveau repository (bouton "New")
   - Nom suggéré : "python-basics-labs" ou "inskillflow-python-labs"
   - Visibilité : Public (requis pour KillerCoda gratuit)
   - Ajouter un README.md
3. Cloner le repository localement


ÉTAPE 3 : STRUCTURE DES FICHIERS POUR CHAQUE LAB
================================================================================
Pour chaque lab/scenario, vous devez créer un dossier avec cette structure :

mon-lab/
├── index.json          (Configuration du scenario)
├── intro.md            (Introduction du lab)
├── step1.md            (Première étape)
├── step2.md            (Deuxième étape)
├── stepX.md            (Autres étapes)
├── finish.md           (Conclusion du lab)
└── assets/             (Optionnel : fichiers à copier dans l'environnement)
    └── script.py


ÉTAPE 4 : CRÉER LE FICHIER index.json
================================================================================
Créer un fichier index.json pour chaque lab avec ce template :

{
  "title": "Python Week 1 - Variables et Types de Données",
  "description": "Apprendre les bases des variables, inputs et types de données en Python",
  "details": {
    "intro": {
      "text": "intro.md"
    },
    "steps": [
      {
        "title": "Variables et Assignation",
        "text": "step1.md"
      },
      {
        "title": "Types de Données",
        "text": "step2.md"
      },
      {
        "title": "Inputs Utilisateur",
        "text": "step3.md"
      }
    ],
    "finish": {
      "text": "finish.md"
    }
  },
  "backend": {
    "imageid": "python:3.11"
  }
}


ÉTAPE 5 : CRÉER LES FICHIERS MARKDOWN
================================================================================

A. intro.md - Introduction du lab
----------------------------------
Exemple de contenu :

# Bienvenue dans Python Week 1 ! 🐍

Dans ce lab, vous allez apprendre :
- Comment créer et utiliser des variables
- Les différents types de données en Python
- Comment recevoir des inputs de l'utilisateur

Prêt ? Commençons !


B. step1.md, step2.md, etc. - Étapes du lab
--------------------------------------------
Exemple de contenu pour step1.md :

# Variables et Assignation

Les variables permettent de stocker des données en mémoire.

## Syntaxe de base

```python
nom_variable = valeur
```

## Exercice

Créez un fichier Python et assignez votre nom à une variable :

```python
mon_nom = "Votre Nom"
print(mon_nom)
```

Exécutez le code :
`python3 script.py`{{execute}}

> **Note** : Le bouton {{execute}} permet d'exécuter automatiquement la commande.


C. finish.md - Conclusion
--------------------------
Félicitations ! 🎉

Vous avez complété ce lab. Vous savez maintenant :
✓ Créer des variables
✓ Utiliser différents types de données
✓ Recevoir des inputs utilisateur

Continuez avec Python Week 2 !


ÉTAPE 6 : STRUCTURE RECOMMANDÉE POUR VOS 6 SEMAINES
================================================================================

Créer ces dossiers dans votre repository GitHub :

python-basics-labs/
├── README.md
├── week1-variables-inputs-datatypes/
│   ├── index.json
│   ├── intro.md
│   ├── step1.md (Variables)
│   ├── step2.md (Data Types)
│   ├── step3.md (Inputs)
│   └── finish.md
│
├── week2-selection-if-statements/
│   ├── index.json
│   ├── intro.md
│   ├── step1.md (If statements)
│   ├── step2.md (Elif et Else)
│   ├── step3.md (Nested conditions)
│   └── finish.md
│
├── week3-lists/
│   ├── index.json
│   ├── intro.md
│   ├── step1.md (Creating lists)
│   ├── step2.md (List operations)
│   ├── step3.md (List methods)
│   └── finish.md
│
├── week4-loops/
│   ├── index.json
│   ├── intro.md
│   ├── step1.md (For loops)
│   ├── step2.md (While loops)
│   ├── step3.md (Loop control)
│   └── finish.md
│
├── week5-functions/
│   ├── index.json
│   ├── intro.md
│   ├── step1.md (Defining functions)
│   ├── step2.md (Parameters and return)
│   ├── step3.md (Scope)
│   └── finish.md
│
└── week6-challenge-questions/
    ├── index.json
    ├── intro.md
    ├── step1.md (Challenge 1)
    ├── step2.md (Challenge 2)
    ├── step3.md (Challenge 3)
    └── finish.md


ÉTAPE 7 : PUBLIER VOS LABS SUR KILLERCODA
================================================================================
1. Pousser tous vos fichiers sur GitHub :
   git add .
   git commit -m "Add Python basics labs"
   git push origin main

2. Aller sur https://killercoda.com/creators

3. Cliquer sur "Create Scenario" ou "Import from GitHub"

4. Connecter votre repository GitHub

5. KillerCoda détectera automatiquement vos scenarios (dossiers avec index.json)

6. Publier vos labs


ÉTAPE 8 : FONCTIONNALITÉS AVANCÉES - ÉDITEUR DE CODE INTERACTIF
================================================================================

A. Boutons d'exécution automatique dans le terminal
----------------------------------------------------
`python3 script.py`{{execute}}     - Exécute dans le terminal
`commande`{{exec}}                 - Alias pour execute

Exemple dans step1.md :
```
Créez un fichier Python :
`touch mon_script.py`{{execute}}

Exécutez-le :
`python3 mon_script.py`{{execute}}
```

B. Éditeur de code intégré avec exécution
------------------------------------------
KillerCoda permet d'ouvrir un éditeur de fichiers dans l'interface :

`script.py`{{open}}                - Ouvre un fichier dans l'éditeur

Pour créer un éditeur pré-rempli :
1. Créer le fichier dans assets/
2. Le copier automatiquement (voir section C)
3. L'ouvrir avec {{open}}

Exemple complet dans step1.md :
```markdown
# Votre premier programme Python

Ouvrez l'éditeur :
`script.py`{{open}}

Copiez ce code dans l'éditeur :
\`\`\`python
# Ceci est un commentaire
# Python n'exécutera pas cette ligne
myCardPin = 1234

print(myCardPin)
\`\`\`

Exécutez le code :
`python3 script.py`{{execute}}
```

C. Copier des fichiers pré-configurés (assets)
-----------------------------------------------
Pour fournir des fichiers de départ aux étudiants :

1. Créer un dossier assets/ dans votre scenario
2. Ajouter vos fichiers Python dans assets/
3. Configurer index.json :

"assets": {
  "host01": [
    {"file": "script.py", "target": "/root/"},
    {"file": "example.py", "target": "/root/"}
  ]
}

D. Éditeur avec code pré-rempli
--------------------------------
Créer assets/script.py avec du code par défaut :

# Ceci est un commentaire
# Python n'exécutera pas cette ligne
# Utilisez les commentaires pour mémoriser ce que fait le code

myCardPin = 1234
print(myCardPin)

Les étudiants pourront modifier et exécuter ce code directement.

E. Vérifications automatiques
------------------------------
Créer des scripts de vérification pour valider les réponses.

Exemple : assets/verify.sh
```bash
#!/bin/bash

# Vérifier si le fichier existe
if [ -f "script.py" ]; then
  # Vérifier si le code produit la bonne sortie
  output=$(python3 script.py)
  if [ "$output" == "1234" ]; then
    echo "✅ Correct ! Continuez à l'étape suivante."
  else
    echo "❌ Pas tout à fait. Réessayez."
  fi
else
  echo "❌ Le fichier script.py n'existe pas encore."
fi
```

Dans step1.md :
```
Vérifiez votre code :
`bash verify.sh`{{execute}}
```

F. Interface multi-panneaux
----------------------------
KillerCoda offre automatiquement :
- Terminal (en bas)
- Éditeur de code (à droite)
- Instructions (à gauche)

Les étudiants peuvent coder, exécuter et voir les résultats simultanément.


ÉTAPE 9 : BONNES PRATIQUES
================================================================================
✓ Commencer simple, augmenter progressivement la difficulté
✓ Fournir des exemples clairs avant les exercices
✓ Inclure des exercices pratiques dans chaque étape
✓ Donner des indices sans révéler la solution complète
✓ Ajouter des défis bonus pour les étudiants avancés
✓ Tester chaque lab avant de le publier
✓ Utiliser des émojis pour rendre le contenu engageant 🚀
✓ Inclure des liens vers la documentation Python officielle


ÉTAPE 10 : ALTERNATIVES AVEC ÉDITEUR DE CODE INTERACTIF
================================================================================

Si vous cherchez d'autres plateformes avec éditeur de code et exécution :

A. Replit Teams for Education
------------------------------
- Environnement de code complet dans le navigateur
- Exécution Python en temps réel
- Éditeur de code professionnel
- Système de classes et d'assignations
- Gratuit pour l'éducation
- Site : https://replit.com/teams-for-education

B. Google Colab (pour Jupyter Notebooks)
-----------------------------------------
- Parfait pour Python avec visualisations
- Exécution de cellules de code
- Gratuit, basé sur Google Drive
- Site : https://colab.research.google.com

C. CodePen / JSFiddle (pour Web)
---------------------------------
- Si vous ajoutez du JavaScript/HTML/CSS plus tard
- Exécution instantanée dans le navigateur

D. GitHub Codespaces
---------------------
- Environnement de développement complet
- Terminal et éditeur intégrés
- Gratuit pour usage éducatif limité

E. Trinket
----------
- Spécialisé pour Python éducatif
- Interface simple et claire
- Exécution de code en ligne
- Site : https://trinket.io


ÉTAPE 11 : RESSOURCES UTILES
================================================================================
- Documentation KillerCoda : https://killercoda.com/creators
- Exemples de scenarios : https://github.com/killercoda/scenario-examples
- Guide de syntaxe KillerCoda : https://killercoda.com/creators/examples
- Markdown guide : https://www.markdownguide.org/
- Python documentation : https://docs.python.org/3/
- W3Schools Python : https://www.w3schools.com/python/


CHECKLIST AVANT PUBLICATION
================================================================================
□ Tous les fichiers index.json sont valides (vérifier avec un validateur JSON)
□ Tous les fichiers .md sont créés et contiennent du contenu
□ Les chemins dans index.json correspondent aux vrais fichiers
□ Le repository GitHub est public
□ Les labs ont été testés localement (si possible)
□ Les instructions sont claires et sans ambiguïté
□ Les exercices ont des solutions testées


CONTACT ET SUPPORT
================================================================================
- Support KillerCoda : support@killercoda.com
- Documentation : https://killercoda.com/creators/documentation
- Community : Discord ou forums KillerCoda


================================================================================
Bonne création de labs ! 🎓🐍
================================================================================

